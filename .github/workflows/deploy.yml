name: Build and Deploy to AKS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

# Workflow-wide permissions (so OIDC works in every job)
permissions:
  contents: read
  packages: write
  id-token: write

env:
  REGISTRY: ${{ vars.ACR_LOGIN_SERVER }}    # myregistry.azurecr.io
  IMAGE_NAME: acme-it-web
  AKS_NAMESPACE: ${{ vars.AKS_NAMESPACE || 'acme-it' }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Login to Azure (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Buildx + cache = faster pushes
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to ACR (token-based)
        run: |
          TOKEN=$(az acr login -n "${{ vars.ACR_NAME }}" --expose-token -o tsv --query accessToken)
          echo "$TOKEN" | docker login "$REGISTRY" -u 00000000-0000-0000-0000-000000000000 --password-stdin

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Login to Azure (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set AKS context (user creds)
        uses: azure/aks-set-context@v4
        with:
          resource-group: ${{ vars.AKS_RESOURCE_GROUP }}
          cluster-name: ${{ vars.AKS_CLUSTER_NAME }}
          # admin: true  # uncomment if you granted Cluster Admin Role instead

      - name: Ensure namespace exists
        run: |
          kubectl get ns $AKS_NAMESPACE || kubectl create ns $AKS_NAMESPACE

      - name: Inject image tag into deployment
        run: |
          sed -i 's#IMAGE_PLACEHOLDER#'"$REGISTRY/$IMAGE_NAME:${{ github.sha }}"'#' k8s/deployment.yaml

      - name: Apply manifests
        run: |
          # namespace.yaml omitted since we create it above if missing
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
          if [ -f k8s/ingress.yaml ]; then kubectl apply -f k8s/ingress.yaml; fi

      - name: Wait for rollout (up to 10m)
        run: |
          sleep 20
          kubectl -n $AKS_NAMESPACE rollout status deploy/${{ env.IMAGE_NAME }} --timeout=10m

      # Auto-debug if rollout fails
      - name: Debug on failure
        if: failure()
        run: |
          echo "=== DEPLOYMENT ==="
          kubectl -n $AKS_NAMESPACE describe deploy $IMAGE_NAME || true
          echo "=== PODS ==="
          kubectl -n $AKS_NAMESPACE get pods -o wide || true
          kubectl -n $AKS_NAMESPACE describe pods -l app=$IMAGE_NAME || true
          echo "=== EVENTS ==="
          kubectl -n $AKS_NAMESPACE get events --sort-by=.lastTimestamp | tail -n 50 || true
          POD=$(kubectl -n $AKS_NAMESPACE get pods -l app=$IMAGE_NAME -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || true)
          if [ -n "$POD" ]; then kubectl -n $AKS_NAMESPACE logs "$POD" --all-containers --tail=200 || true; fi
